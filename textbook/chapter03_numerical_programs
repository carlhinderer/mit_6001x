-------------------------------------------------
CHAPTER 3 - NUMERICAL PROGRAMS
-------------------------------------------------

- Exhaustive Enumeration

    'Exhaustive enumeration' is a variant of the guess-and-check technique, in which we
      enumerate all possibilities until we get the right answer or exhaust the space of
      possibilities.


    # Find the cube root of a perfect cube
    def exhaustive_cube_root():
        x = get_int_from_user()
        ans = 0
        while ans**3 < abs(x):
            ans += 1
        if ans**3 != abs(x):
            print(x, 'is not a perfect cube')
        else:
            if x < 0:
                ans = -ans
            print('Cube root of', x, 'is', ans)

    def get_int_from_user():
        return int(input('Enter an integer: '))



- Bisection Search

    A bisection search divides the search space in half on each step.

    def bisection_square_root():
        x = get_int_from_user()
        epsilon = 0.01
        num_guesses = 0
        low = 0.0
        high = max(1.0, x)
        ans = (high + low) / 2.0

        while abs(ans**2 - x) >= epsilon:
            print('low =', low, 'high=', high, 'ans=', ans)
            num_guesses += 1
            if ans**2 < x:
                low = ans
            else:
                high = ans
            ans = (high + low) / 2

        print('num_guesses:', num_guesses)
        print(ans, 'is close to square root of', x)



- Floating Point Numbers

    Floating point numbers have 2 components:
      1. Significant figures of the number (number of them is the 'precision')
      2. Exponent

    In most Python implementations, there are 53 bits of precision available for floating-point
      numbers.


    Remember that floating point numbers are approximations and that can have effects when
      doing comparisons, etc.

      >>> a, b = 1.0002, 1.0002
      >>> a == b
      False

      >>> round(a, 4) == round(b, 4)
      True



- Newton's Method (aka Newton-Raphson Method)

    Newton's method is used to find the real roots of a polynomial function.  It uses
      successive approximation.


    def newtons_method_square_root():
        epsilon = 0.01
        num_guesses = 0
        k = get_int_from_user()
        guess = k / 2.0
    
        while abs(guess * guess - k) >= epsilon:
            guess = guess - (((guess**2) - k) / (2 * guess))
            num_guesses += 1
    
        print('num_guesses:', num_guesses)
        print('Square root of', k, 'is about', guess)