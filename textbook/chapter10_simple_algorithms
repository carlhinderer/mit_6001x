-------------------------------------------------
CHAPTER 10 - SIMPLE ALGORITHMS
-------------------------------------------------

- To design an alogrithm to solve a problem:
    
    1. Develop an understanding of the complexity of the problem.
    2. Think about how to break the problem into subproblems.
    3. Relate those subproblems to other problems for which efficient algrorithms 
         already exist.



- Python list implementation

    Python lists are implemented using indirection.  Indirection involves accessing
      something by accessing something else that contains a reference to the
      thing initially sought.

    Python lists are actully arrays of pointers to the objects in the list.  By
      implementing lists this way, we can keep constant-time access while allowing
      lists of heterogenous elements.



- Linear Search

    If we know nothing about the order of the list we're searching, linear
      search is the best we can do.


    def linear_search(L, e):
        for i in range(len(L)):
            if L[i] == e:
                return True
        return False



- Binary Search

    If the list we are searching is sorted, we can search in O(log n) time.


    def binary_search(L, e):
        def bsearch(L, e, low, high):
            if high == low:
                return L[low] == e
            mid = (low + high) // 2
            if L[mid] == e:
                return True
            elif L[mid] > e:
                if low == mid:
                    return False
                else: 
                    return bsearch(L, e, low, mid-1)
            else:
                return bsearch(L, e, 0, len(L)-1)

        if len(L) == 0:
            return False
        else:
            return bsearch(L, e, 0, len(L)-1)
