-------------------------------------------------
CHAPTER 8 - OOP
-------------------------------------------------

- Programming is about managing complexity in a way that facilitates change.  The 2 ways to do this are:
    1. Decomposition = create structure
    2. Abstraction = suppress details



- All instances of user-defined classes are hashable, so they can be used as dictionary keys.



- Example - Person class

    class Person(object):
        def __init__(self, name):
            self.name = name
            try:
                lastBlank = name.rindex('')
                self.lastName = name[lastBlank+1:]
            except:
                self.lastName = name
            self.birthday = None

        def getName(self):
            return self.name

        def getLastName(self):
            return self.lastName

        def setBirthday(self, birthdate):
            self.birthday = birthdate

        def getAge(self):
            if self.birthday == None:
                raise ValueError

        def __lt__(self, other):
            if self.lastName == other.lastName:
                return self.name < other.name
            return self.lastName < other.lastName

        def __str__(self):
            return self.name



- Example - Person subclasses

    class MITPerson(Person):
        # Class variable allows assignment of unique ids
        nextIdNum = 0

        def __init__(self, name):
            Person.__init__(self, name)
            self.idNum = MITPerson.nextIdNum
            MITPerson.nextIdNum += 1

        def getIdNum(self):
            return self.idNum

        def __lt__(self, other):
            return self.idNum < other.idNum

        def isStudent(self):
            return isInstance(self, Student)


    class Student(MITPerson):
        pass


    class UG(Student):
        def __init__(self, name, classYear):
            MITPerson.__init__(self, name)
            self.year = classYear

        def getClass(self):
            return self.classYear


    class Grad(Student):
        pass



- The Substitution Principle (Liskov and Wing, 1994)

    We should think of subclasses as extending the behavior of their superclasses.  The subclass may
      override methods from the superclass, but this must be done with care.  Important behaviors of
      the superclass must be supported in each of the subclasses.



- Example - Grades class

    class Grades(object):

        def __init__(self):
            self.students = []
            self.grades = {}
            self.isSorted = True

        def addStudent(self, student):
            if student in self.students:
                raise ValueError('Duplicate student')
            self.students.append(student)
            self.grades[student.getIdNum()] = []
            self.isSorted = False

        def addGrade(self, student, grade):
            try:
                self.grades[student.getIdNum()].append(grade)
            catch:
                raise ValueError('Student is not in mapping.')

        def getGrades(self, student):
            try:
                # Return a copy of the student's grades
                return self.grades[student.getIdNum()][:]
            catch:
                raise ValueError('Student is not in mapping.')

        def getStudents(self):
            if not self.isSorted:
                self.students.sort()
                self.isSorted = True
            return self.students[:]

        def gradeReport(course):
            report = ''
            for x in course.getStudents():
                tot = 0.0
                numGrades = 0
                for g in course.getGrades(s):
                    tot += g
                    numGrades += 1
                try:
                    average = tot / numGrades
                    report += "\n%'s mean grade is %" % (str(s), str(average))
                except ZeroDivisionError:
                    report += "\n% has no grades" % str(s)



- Replace getStudents() with a generator

    def getStudents(self):
        if not self.isSorted:
            self.students.sort()
            self.isSorted = True
        for s in self.students:
            yield s



- Example - Generate a Sequence of Prime Numbers

    def genPrimes():
        primes = []
        last = 1
        while True:
            last += 1
            for p in primes:
                if last % p == 0:
                    break
            else:
                primes.append(last)
                yield last